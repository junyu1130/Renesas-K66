#include "FindTrack.h"

/*********define for SearchCenterBlackline**********/

int   MiddleLine[ROW];
int   RightEdge[ROW];
int   LeftEdge[ROW];
int   Width[ROW];//动态路宽

int   MidPri         = COL / 2;
int   LastLine       = 0;
float AvaliableLines = 0;
int   LeftLose       = 0;
int   RightLose      = 0;
int   AllLose        = 0;
int   LeftLoseStart  = 0;//记录左边丢线的开始行
int   RightLoseStart = 0;//记录右边边丢线的开始行
int   WHITEStart     = 0;


/*********define for GetBlackEndParam**********/
int BlackEndMR      = 0;
int BlackEndML      = 0;
int BlackEndLL      = 0;
int BlackEndRR      = 0;
int BlackEndL       = 0;
int BlackEndM       = 0;
int BlackEndR       = 0;
int BlackEndMaxMax  = 0;
int BlackEndMax     = 0;
int DropRow         = 0;

//设置中线，左线，右线的初始化值
//设置每一行对应的赛道宽度
static void SetInitVal(void)
{
    int i;

    for(i=0; i<ROW; i++)//赋初值
    {
        RightEdge[i]  = COL - 1;
        LeftEdge[i]   = 0;
        MiddleLine[i] = COL / 2;
        Width[i]  = 41 + i*1.56;     //动态路宽
    }
}
//全行扫描和边缘结合提取赛道的中线
//前十行全行扫描
//后面54行，根据上一行的寻线情况来决定当前行的寻线方式和起点
static void SearchCenterBlackline(void)
{
    int16 i         = 0;
    int16 j         = 0;
    uint8 jj        = 0;
    uint8 WHITENum  = 0;

    LeftLose        = 0;//变量清零
    RightLose       = 0;
    AllLose         = 0;
    WHITENum        = 0;
  
    SetInitVal();

    //前十行，采用从中间往两边扫描的方法
    for(i=ROW-1; i>=54; i--) //首先找前十行，全行扫描
    {
        if(i == ROW-1)//首行就以图像中心作为扫描起点
        {
            j = MidPri;
        }
        else
        {
            j = MiddleLine[i+1];//否则就以上一行中点的位置作为本行扫描起点
        }
        if(j <= 2)
        {
            j = 2;
        }
        while(j >= 2)//j>=2有效范围内进行搜寻
        {
            if(bin_image[i][j]==WHITE && bin_image[i][j-1]==BLACK && bin_image[i][j-2]==BLACK)//从右向左找到白黑黑跳变
            {
                LeftEdge[i] = j;//找到则赋值 找不到保持原值0
                break;//跳出本行寻线
            }
            j--;//列数往左移动
        }
        if(i==ROW-1) //再找右边界
        {
            j = MidPri;//如果首行，从图像中心开始搜寻
        }
        else
        {
            j = MiddleLine[i+1];//否则从上一行中心位置开始搜寻
        }
        if(j >= COL-3)//有效范围内搜寻右线
        {
            j = COL-3;
        }
        while(j <= COL-3)
        {
            if(bin_image[i][j]==WHITE && bin_image[i][j+1]==BLACK && bin_image[i][j+2]==BLACK)//从左向右找到白白黑跳变点
            {
                RightEdge[i] = j;//找到则赋值   找不到保持原值
                break;//跳出本行寻线
            }
            j++;//列数往右移动
        }
        if(LeftEdge[i]!=0 && RightEdge[i]!=COL-1)//中线判断，没有丢线
        {
            MiddleLine[i] = (LeftEdge[i] + RightEdge[i])/2;
        }
        else if(LeftEdge[i]!=0 && RightEdge[i]==COL-1)//丢了右线,没有丢左线
        {
            RightLose++;//记录只有右线丢的数量
            //如果当行的
            if((RightEdge[i]-LeftEdge[i]) >= (RightEdge[i+1]-LeftEdge[i+1]+5))//突变
            {
                MiddleLine[i] = MiddleLine[i+1]+2;
            }
            else
            {
                MiddleLine[i] = LeftEdge[i] + Width[i]/2 + 5;//正常的话就用半宽补
            }
        }
        else if(LeftEdge[i]==0 && RightEdge[i]!=COL-1)//丢了左线
        {
            if((RightEdge[i]-LeftEdge[i]) >= (RightEdge[i+1]-LeftEdge[i+1]+1))//突变
            {
                MiddleLine[i] = MiddleLine[i+1]-1;
            }
            else
            {
                MiddleLine[i] = RightEdge[i] - Width[i]/2 - 5;//线宽
            }
        }
        else if(LeftEdge[i]==0 && RightEdge[i]==COL-1)//两边都丢了的话
        {
            AllLose++;
            if(i == ROW-1)//如果是首行就以图像中心作为中点
            {
                MiddleLine[i] = MidPri;
            }
            else
            {
                MiddleLine[i] = MiddleLine[i+1];//如果不是首行就用上一行的中线作为本行中点
            }
        }

        if(MiddleLine[ROW-1] >= COL - 11)
        {
            MidPri = COL - 11;
        }
        else if(MiddleLine[ROW-1] <= 10)
        {
            MidPri = 10;
        }
        else
        {
            MidPri = MiddleLine[ROW-1];//记录本帧图像第63行的中线值，作为下一幅图像的63行扫描起始点
        }
    }
    for(i=53; i>=0; i--)//查找剩余行
    {
        if(LeftEdge[i+1]!=0 && RightEdge[i+1]!=COL-1) //上一行两边都找到 启用边沿扫描
        {
            j = ((LeftEdge[i+1]+10) >= COL-3)? COL-3:(LeftEdge[i+1]+10);//先找左边界
            jj = ((LeftEdge[i+1]-5) <= 1)? 1:(LeftEdge[i+1]-5);
            while(j >= jj)
            {
                if(bin_image[i][j]==WHITE && bin_image[i][j-1]==BLACK && bin_image[i][j-2]==BLACK)
                {
                    LeftEdge[i] = j;
                    break;
                }
                j--;
            }
            j = ((RightEdge[i+1]-10) <= 1)? 1:(RightEdge[i+1]-10); //在找右边界
            jj = ((RightEdge[i+1]+5) >= COL-3)? COL-3:(RightEdge[i+1]+5);
            while(j <= jj)
            {
                if(bin_image[i][j]==WHITE && bin_image[i][j+1]==BLACK && bin_image[i][j+2]==BLACK)
                {
                    RightEdge[i] = j;
                    break;
                }
                j++;
            }
        }
        else if(LeftEdge[i+1]!=0 && RightEdge[i+1]==COL-1)//上一行只找到左边界
        {
            j  = ((LeftEdge[i+1]+10) >= COL-3)? COL-3:(LeftEdge[i+1]+10);//左边界用边沿扫描
            jj = ((LeftEdge[i+1]-5) <= 1)? 1:(LeftEdge[i+1]-5);
            while(j >= jj)
            {
                if(bin_image[i][j]==WHITE && bin_image[i][j-1]==BLACK && bin_image[i][j-2]==BLACK)
                {
                    LeftEdge[i] = j;
                    break;
                }
                j--;
            }
            j = MiddleLine[i+1];//上一行丢了右边界用全行扫描
            if(j >= COL-3)
            {
                j = COL-3;
            }
            while(j <= COL-3)
            {
                if(bin_image[i][j]==WHITE && bin_image[i][j+1]==BLACK && bin_image[i][j+2]==BLACK)
                {
                    RightEdge[i] = j;
                    break;
                }
                j++;
            }
        }
        else if(LeftEdge[i+1]==0 && RightEdge[i+1]!=COL-1) //上一行只找到右边界
        {
            j = ((RightEdge[i+1]-10) <= 1)? 1:(RightEdge[i+1]-10);//边缘追踪找右边界
            jj = ((RightEdge[i+1]+5) >= COL-3)? COL-3:(RightEdge[i+1]+5);
            while(j <= jj)
            {
                if(bin_image[i][j]==WHITE&&bin_image[i][j+1]==BLACK&&bin_image[i][j+2]==BLACK)
                {
                    RightEdge[i] = j;
                    break;
                }
                j++;
            }
            j = MiddleLine[i+1]; //全行扫描找左边界
            if(j < 2)
            {
                j = 2;
            }
            while(j >= 2)
            {
                if(bin_image[i][j]==WHITE && bin_image[i][j-1]==BLACK&& bin_image[i][j-2]==BLACK)
                {
                    LeftEdge[i] = j;
                    break;
                }
                j--;
            }
        }
        else if(LeftEdge[i+1]==0 && RightEdge[i+1]==COL-1)  //上一行没找到边界，可能是十字或者环形
        {
            j = MiddleLine[i+1];   //全行找左边界
            while(j >= 1)
            {
                if(bin_image[i][j]==WHITE && bin_image[i][j-1]==BLACK && bin_image[i][j-2]==BLACK)
                {
                    LeftEdge[i] = j;
                    break;
                }
                j--;
            }
            j = MiddleLine[i+1];   //全行找右边界
            while(j<=COL-3)
            {
                if(bin_image[i][j]==WHITE&&bin_image[i][j+1]==BLACK)
                {
                    RightEdge[i] = j;
                    break;
                }
                j++;
            }
        }
        if( (RightEdge[i]-LeftEdge[i]) >= (RightEdge[i+1]-LeftEdge[i+1]+3) )//突变
        {
            MiddleLine[i] = MiddleLine[i+1];//用上一行
        }
        else
        {
            if(LeftEdge[i]!=0 && RightEdge[i]!=COL-1)
            {
                MiddleLine[i] = (LeftEdge[i] + RightEdge[i])/2+5;
                //对斜出十字进行纠正
                if(MiddleLine[i]-MiddleLine[i+1]>8 && (ABS(LeftEdge[i]-LeftEdge[i+1]>3)||ABS(RightEdge[i]-RightEdge[i+1]>3)) && i>=32)//中线向右突变
                {
                    uint8 ii = i;
                    while(1)
                    {
                        MiddleLine[ii+1] = MiddleLine[ii]-1;
                        ii++;

                        if( ii>=53 || (MiddleLine[ii]-MiddleLine[ii+1]<=1) )
                        {
                            break;
                        }
                    }
                }
                if((MiddleLine[i+1]-MiddleLine[i]>8)&&((ABS(LeftEdge[i]-LeftEdge[i+1]>3)||ABS(RightEdge[i]-RightEdge[i+1]>3)))&& i>=32)//中线向左突变
                {
                    uint8 ii = i;
                    while(1)
                    {
                        MiddleLine[ii+1] = MiddleLine[ii]+1;
                        ii++;

                        if(ii>=53 || (MiddleLine[ii+1]-MiddleLine[ii]<=1) )
                        {
                            break;
                        }
                    }
                }
            }
            else if(LeftEdge[i]!=0 && RightEdge[i]==COL-1)//find left
            {
                RightLose++;
                if(LeftEdge[i+1] != 0)
                {
                    MiddleLine[i] = MiddleLine[i+1]+LeftEdge[i]-LeftEdge[i+1]+5;
                }
                else
                {
                    MiddleLine[i]  = LeftEdge[i] + Width[i]/2+5;
                }
            }
            else if(LeftEdge[i]==0 && RightEdge[i]!=COL-1)//find right
            {
                LeftLose++;
                if(RightEdge[i+1] != COL-1)
                {
                    MiddleLine[i] = MiddleLine[i+1]+RightEdge[i]-RightEdge[i+1]-5;
                }
                else
                {
                    MiddleLine[i] = RightEdge[i] - Width[i]/2-5;
                }
            }
            else if(LeftEdge[i]==0 && RightEdge[i]==COL-1)//两边丢线
            {
                WHITENum++;
                AllLose++;

                if(WHITENum == 1)
                {
                    WHITEStart = i;
                }
                MiddleLine[i] = MiddleLine[i+1];
            }
        }
        if(i == 0)             
        {            
            AvaliableLines = ROW - 1;
            LastLine  = 0;  
            break;
        }
        uint16_t m = MiddleLine[i];
        if(m < 5)
        {
            m = 5;
        }
        if(m > COL - 6)
        {
            m = COL - 6;
        }
        if( (LeftEdge[i]!=0 && LeftEdge[i]>=COL-16) || (RightEdge[i]!=COL-1 && RightEdge[i]<15) || ((i>=1)&&(bin_image[i-1][m]== BLACK))) //最后一行
        {
            LastLine = i;//最后一行，动态前瞻
            AvaliableLines = ROW - i;//有效行数
            break;
        }
    }
}

//提取图像的特征
//选取几列，从图像底部往上扫描
//获取黑线截止行
static void GetBlackEndParam(void)
{

    unsigned char LEndFlag  = 0;//标志位
    unsigned char MEndFlag  = 0;
    unsigned char REndFlag  = 0;
    unsigned char MREndFlag = 0;
    unsigned char MLEndFlag = 0;
    unsigned char LLEndFlag = 0;
    unsigned char RREndFlag = 0;

    int i=0;

    BlackEndMR   = 0;//清零
    BlackEndML   = 0;
    BlackEndLL   = 0;
    BlackEndRR   = 0;
    BlackEndL    = 0;
    BlackEndM    = 0;
    BlackEndR    = 0;

    for (i = ROW-1; i >= 3 ; i--)
    {
        if(bin_image[i][COL/2] == WHITE && !MEndFlag )//94
        {
            BlackEndM++;//中黑线截至行
        }
        else if(i > 1 && bin_image[i-1][COL/2] == BLACK && bin_image[i-2][COL/2] == BLACK)//连续两行是黑色
        {
            MEndFlag = 1;
        }
        if(bin_image[i][COL/4] == WHITE && !LEndFlag )//47
        {
            BlackEndL++;//左黑线截至行
        }
        else if(i > 1 && bin_image[i-1][COL/4] == BLACK && bin_image[i-2][COL/4] == BLACK)
        {
            LEndFlag = 1;
        }
        if(bin_image[i][COL*3/4] == WHITE && !REndFlag )//141
        {
            BlackEndR++;//右黑线截至行
        }
        else if(i > 1 && bin_image[i-1][COL*3/4] == BLACK && bin_image[i-2][COL*3/4] == BLACK)
        {
            REndFlag = 1;
        }
        if(bin_image[i][(int)(COL*3/8)] == WHITE && !MLEndFlag )//偏左
        {
            BlackEndML++;
        }
        else if(i > 1 && bin_image[i-1][(int)(COL*3/8)] == BLACK && bin_image[i-2][(int)(COL*3/8)] == BLACK)
        {
            MLEndFlag = 1;
        }
        if(bin_image[i][(int)(COL*5/8)] == WHITE && !MREndFlag )
        {
            BlackEndMR++;
        }
        else if(i > 1 && bin_image[i-1][(int)(COL*5/8)] == BLACK && bin_image[i-2][(int)(COL*5/8)] == BLACK)
        {
            MREndFlag = 1;
        }
        if(bin_image[i][(int)(COL/8)] == WHITE && !LLEndFlag )
        {
            BlackEndLL++;
        }
        else if(i > 1 && bin_image[i-1][(int)(COL/8)] == BLACK && bin_image[i-2][(int)(COL/8)] == BLACK)
        {
            LLEndFlag = 1;
        }
        if(bin_image[i][(int)(COL*7/8)] == WHITE && !RREndFlag )
        {
            BlackEndRR++;
        }
        else if(i > 1 && bin_image[i-1][(int)(COL*7/8)] == BLACK && bin_image[i-2][(int)(COL*7/8)] == BLACK)
        {
            RREndFlag = 1;
        }
    }

    BlackEndMax = MAX(BlackEndL,BlackEndM);//取大值
    BlackEndMax = MAX(BlackEndMax,BlackEndR);
    BlackEndMaxMax = MAX(BlackEndMax,BlackEndMR);
    BlackEndMaxMax = MAX(BlackEndMax,BlackEndML);
    BlackEndMaxMax = MAX(BlackEndMax,BlackEndLL);
    BlackEndMaxMax = MAX(BlackEndMax,BlackEndRR);
    if(BlackEndMaxMax>=ROW-1)
    {
        BlackEndMaxMax=ROW-3;
    }
    DropRow=ROW-BlackEndMaxMax;//封顶的行数
}

void findTrack(void)
{
    SearchCenterBlackline();//提取赛道的中线
    GetBlackEndParam();//寻找黑线的截止行
}
