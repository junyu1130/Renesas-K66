#include "servo.h"

//舵机中值
int servo_Mid = 720;
uint16_t servo_Min = 620;
uint16_t servo_Max = 820;

void Servo_Init(void)//伺服器初始化
{
    ftm_pwm_init(servo_Port, servo_Ch, servo_Frequency, servo_Mid);
}

int Server_Control(int change_InitalDuty)//舵机控制，输入向左右偏移的占空比
{
    int servo_InitalDuty = 0;
    servo_InitalDuty = change_InitalDuty;
    //上下限保护
    if(servo_InitalDuty > servo_Max)
    {
        servo_InitalDuty = servo_Max;
    }
    else if(servo_InitalDuty < servo_Min)
    {
        servo_InitalDuty = servo_Min;
    }
    //应用
    ftm_pwm_duty(servo_Port,servo_Ch,servo_InitalDuty);

    return 0;
}


void Servo_test(void)
{
    ftm_pwm_duty(servo_Port,servo_Ch,servo_Min);
    DelayMs(500);
    ftm_pwm_duty(servo_Port,servo_Ch,servo_Max);
    DelayMs(500);
}

/*********define for SteerControl**********/
uint16_t  KP=20;//舵机方向比例系数，影响舵机的打角范围
uint16_t  KD=0;//10//7.5//舵机方向微分系数,影响舵机的打角反应
float  SteerPwmAdd=0.0;//舵机pwm增量
float  Error;//偏差值
float  LastError;//上次的偏差
float  WeightSum=0;
float  CenterMeanValue=0;
float  CenterSum=0;
uint32_t SteerPwm=0,LastSteerSwm=0;//舵机的pwm值和上次舵机的pwm值

float Weight[64] = {
    0,0,0,0,0,0,0,0,0,0,              //0-9行，基本用不到

    2,2,2,2,2,1.5,1,1.5,1,1,             //0-19行，基本用不到

    2.5,1,2.2,1,2.5,1,2,2,1,2,            //20-29行

    1,3,2,2,1,2,1,2,2,1,              //30-39行

    3,1,2,3,3,2,3,1,1,2,             //40-49行
  
    3,1,2,3,3,2,3,1,1,3,             //50-59行

    1,1,1,1,             //60-63行
};         

static void CalculateError(void)
{
    int i;
    CenterSum=0;
    CenterMeanValue=0;
    WeightSum=0;
    if(Cross.LeftSideling)
    {
        for(i=61; i>InflectionPointL.InflectionPointRow; i--)
        {
            CenterSum+=MiddleLine[i]*Weight[i];
            WeightSum+=Weight[i];
        }
    }
    else if(Cross.RightSideling)
    {
        for(i=61; i>InflectionPointR.InflectionPointRow; i--)
        {
            CenterSum+=MiddleLine[i]*Weight[i];
            WeightSum+=Weight[i];
        }
    }
    else if(StrightIntoCrossL)
    {
        for(i=61; i>InflectionPointL.InflectionPointRow; i--)
        {
            CenterSum+=MiddleLine[i]*Weight[i];
            WeightSum+=Weight[i];
        }
    }

    else if(StrightIntoCrossR)
    {
        for(i=61; i>InflectionPointR.InflectionPointRow; i--)
        {
            CenterSum+=MiddleLine[i]*Weight[i];
            WeightSum+=Weight[i];
        }
    }
    else if(StrightIntoCrossLR)
    {
        for(i=61; i>(InflectionPointR.InflectionPointRow+InflectionPointR.InflectionPointRow)/2; i--)
        {
            CenterSum+=MiddleLine[i]*Weight[i];
            WeightSum+=Weight[i];
        }
    }
    else if(Cross.CrossFlag)
    {
        for(i=48; i>LastLine; i--)
        {
            CenterSum+=MiddleLine[i]*Weight[i];
            WeightSum+=Weight[i];
        }
    }
    else
    {
        for(i=60; i>LastLine; i--)
        {
            CenterSum+=MiddleLine[i]*Weight[i];
            WeightSum+=Weight[i];
        }
    }

    if(WeightSum!=0)
    {
        CenterMeanValue=(CenterSum/WeightSum);//算出加权平均后中线的值
    }

    LastError=Error;
    Error=COL/2-CenterMeanValue;// 一场图像偏差值
}
//功能：舵机控制
void servoControl(void)
{
    CalculateError();
    SteerPwmAdd=(KP/10.0*Error)+KD/10.0*(Error-LastError);//舵机的pd控制器
    if(SteerPwmAdd>=100)
        SteerPwmAdd=100;
    if(SteerPwmAdd<=-100)
        SteerPwmAdd=-100;
    SteerPwm=(uint32_t)(SteerPwmAdd+servo_Mid);
    if(SteerPwm>=servo_Max)//限幅
        SteerPwm=servo_Max;
    if(SteerPwm<=servo_Min)
        SteerPwm=servo_Min;

    ftm_pwm_duty(servo_Port, servo_Ch, SteerPwm);//舵机pwm更新
    LastSteerSwm=SteerPwm;//记录pwm值
}

